import paho.mqtt.client as mqtt
import json
import datetime
import logging
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('noise_server.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class NoiseMapServer:
    def __init__(self):
        self.setup_database()
        
        # MQTT –∫–ª–∏–µ–Ω—Ç
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect('noise_data.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS noise_measurements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                device_id TEXT NOT NULL,
                noise_level REAL NOT NULL,
                latitude REAL NOT NULL,
                longitude REAL NOT NULL,
                timestamp INTEGER,
                server_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            client.subscribe("noise/map/data")
            logging.info("üì° –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–µ–º—É: noise/map/data")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: {rc}")
    
    def on_message(self, client, userdata, msg):
        try:
            data = json.loads(msg.payload.decode())
            logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {data.get('device_id', 'unknown')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.save_to_database(data)
            
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def save_to_database(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.cursor.execute('''
                INSERT INTO noise_measurements 
                (device_id, noise_level, latitude, longitude, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                data.get('device_id'),
                data.get('noise_level'),
                data.get('latitude'),
                data.get('longitude'),
                data.get('timestamp')
            ))
            self.conn.commit()
            
            logging.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data['device_id']} - {data['noise_level']} –¥–ë")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.cursor.execute('''
            SELECT 
                COUNT(*) as total,
                AVG(noise_level) as avg_noise,
                MAX(noise_level) as max_noise,
                MIN(noise_level) as min_noise
            FROM noise_measurements
        ''')
        result = self.cursor.fetchone()
        
        if result and result[0] > 0:
            stats = {
                'total_measurements': result[0],
                'avg_noise_level': round(result[1], 2),
                'max_noise_level': result[2],
                'min_noise_level': result[3]
            }
            return stats
        return {}
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —à—É–º–æ–≤—ã—Ö –∫–∞—Ä—Ç...")
        logging.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            self.client.connect("localhost", 1883, 60)
            self.client.loop_forever()
            
        except KeyboardInterrupt:
            logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self.client.disconnect()
            self.conn.close()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    server = NoiseMapServer()
    server.start()